--// by Rudert

print("successful load the script")

-- Pengaturan tambahan untuk deteksi
getgenv().Paws = {
    ["AutoParry"] = true,
    ["PingBased"] = true,
    ["PingBasedOffset"] = 0,
    ["DistanceToParry"] = 0.5,
    ["BallSpeedCheck"] = true,
    ["DynamicDistance"] = true,
    ["AngleThreshold"] = 45,
    ["TrajectoryPrediction"] = true,
    ["WarpDetection"] = true,  -- Deteksi belokan tajam
    ["ExecutorCheck"] = true,
    ["AimbotPrediction"] = true, -- Prediksi Aimbot
}

local Players = game:GetService("Players")
local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local VirtualManager = game:GetService("VirtualInputManager")
local PawsTable = getgenv().Paws

-- Fungsi untuk menemukan bola
local function FindBall()
    local RealBall
    local Balls = workspace:WaitForChild("Balls", 5)
    if not Balls then
        warn("Balls not found in workspace")
        return nil
    end
    for _, v in pairs(Balls:GetChildren()) do
        if v:GetAttribute("realBall") == true then
            RealBall = v
            break
        end
    end
    return RealBall
end

-- Fungsi untuk menghitung sudut kedatangan bola
local function CalculateAngle(ballPosition, playerPosition, playerLookVector)
    local directionToBall = (ballPosition - playerPosition).unit
    return math.deg(math.acos(directionToBall:Dot(playerLookVector)))
end

-- Fungsi untuk prediksi posisi bola
local function PredictBallPosition(ball, deltaTime)
    if ball then
        return ball.Position + (ball.AssemblyLinearVelocity * deltaTime)
    end
end

-- Fungsi untuk memprediksi waktu kedatangan bola
local function CalculateTimeToArrival(ball, playerPosition)
    local distance = (ball.Position - playerPosition).Magnitude
    local speed = ball.AssemblyLinearVelocity.Magnitude
    if speed > 0 then
        return distance / speed
    end
    return math.huge
end

-- Fungsi utama AutoParry
game:GetService("RunService").PreRender:Connect(function()
    local Ball = FindBall()
    if not Ball then return end

    if not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then
        return -- Kembalikan jika belum siap
    end

    local PlayerPosition = Player.Character.HumanoidRootPart.Position
    local BallPosition = Ball.Position
    local BallVelocity = Ball.AssemblyLinearVelocity.Magnitude
    local PlayerVelocity = Player.Character.HumanoidRootPart.AssemblyLinearVelocity.Magnitude
    local Distance = Player:DistanceFromCharacter(BallPosition)

    -- Distance Parry Adjustment with Dynamic Speed
    if PawsTable.DynamicDistance then
        local ping = game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 1000
        PawsTable.DistanceToParry = math.max(math.max(ping, 3.5) + BallVelocity / 50, 0.5)
    end

    -- Penghitungan sudut kedatangan bola
    local AngleToBall = CalculateAngle(BallPosition, PlayerPosition, Player.Character.HumanoidRootPart.CFrame.LookVector)
    if AngleToBall > PawsTable.AngleThreshold then
        return -- Tidak melakukan parry jika sudut melebihi threshold
    end

    -- Deteksi belokan tajam
    if PawsTable.WarpDetection then
        local currentDirection = Ball.AssemblyLinearVelocity.unit
        local previousDirection = previousDirection or currentDirection
        if (currentDirection - previousDirection).Magnitude > 0.5 then
            warn("Ball is warping, sharp turn detected")
        end
        previousDirection = currentDirection
    end

    -- Prediksi posisi dan waktu kedatangan bola
    if PawsTable.TrajectoryPrediction then
        BallPosition = PredictBallPosition(Ball, 0.1) or BallPosition
    end
    local timeToArrival = CalculateTimeToArrival(Ball, PlayerPosition)

    -- Pengaturan jarak berdasarkan kecepatan bola dan waktu kedatangan
    if PawsTable.PingBased then
        local ping = BallVelocity * (game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 1000)
        Distance -= ping + PawsTable.PingBasedOffset
    end

    -- Pastikan kecepatan bola > 0 jika BallSpeedCheck diaktifkan
    if PawsTable.BallSpeedCheck and BallVelocity == 0 then return end

    -- Executor Check untuk akurasi
    if PawsTable.ExecutorCheck then
        local velocityRatio = BallVelocity / (BallVelocity + PlayerVelocity)
        print("Executor Accuracy:", math.floor(velocityRatio * 100), "%")
    end

    -- Lakukan parry jika semua kondisi terpenuhi
    if (Distance / BallVelocity) <= PawsTable.DistanceToParry and PawsTable.AutoParry then
        VirtualManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    end
end)
