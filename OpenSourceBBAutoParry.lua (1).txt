-- Open Source Blade Ball Auto Parry By PawsThePaw --
--// My Discord: pawsthepaw
--// Notes: I'm not giving away my Freeze & Invisibility Detection, lmao, this is sort of decent, time based. Enjoy, Skid, or Learn; It's Your Choice.

local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Nurysium_Util = loadstring(game:HttpGet("https://raw.githubusercontent.com/flezzpe/Nurysium/main/nurysium_helper.lua"))()

local function getTrainingBall()
    for _, ball in Workspace:WaitForChild("TrainingBalls"):GetChildren() do
        if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
            return ball
        end
    end
end

local Player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 9e9)
local BallsContainer = Workspace:WaitForChild("Balls", 9e9)

local aura_table = {
    canParry = true,
    PingBased = true,
    PingBasedOffset = 0,
    parry_Range = 30,
    BallSpeedCheck = true,
    hit_Count = 0,
    hit_Time = tick(),
    ball_Warping = tick(),
    is_ball_Warping = false,
    last_target = nil,
}

local closestEntityToMouse = nil

local function isTargetHighlighted()
    return Player.Character and Player.Character:FindFirstChild("Highlight") ~= nil
end

local function getClosestEntityToMouse()
    local closest = nil
    local shortestDistance = math.huge
    local mouse = Player:GetMouse()

    -- Ensure workspace.Alive exists
    if not Workspace:FindFirstChild("Alive") then
        return nil
    end

    -- Loop through all entities
    for _, entity in pairs(Workspace.Alive:GetChildren()) do
        if entity:IsA("Model") then
            local humanoidRootPart = entity:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Convert world position to screen position
                local screenPoint = workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position)
                local distanceToMouse = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude

                -- Check if this is the closest entity so far
                if distanceToMouse < shortestDistance then
                    closest = entity
                    shortestDistance = distanceToMouse
                end
            end
        end
    end

    return closest -- Return closest entity or nil if not found
end

RunService.Heartbeat:Connect(function()
    closestEntityToMouse = getClosestEntityToMouse()
end)

RunService.PreRender:Connect(function()
    local networkStats = game:WaitForChild("Stats"):WaitForChild("Network")
    local pingStatItem = networkStats:WaitForChild("ServerStatsItem"):WaitForChild("Data Ping")
    local ping = pingStatItem:GetValue() / 10
    local self = training_mode and getTrainingBall() or Nurysium_Util.getBall()

    if not self then return end -- Ensure the ball exists

    local player_Position = Player.Character.PrimaryPart.Position
    local ball_Position = self.Position
    local ball_Velocity = self.AssemblyLinearVelocity

    local ball_Direction = (player_Position - ball_Position).Unit
    local ball_Distance = (player_Position - ball_Position).Magnitude
    local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
    local ball_Speed = ball_Velocity.Magnitude

    local player_Velocity = Player.Character.HumanoidRootPart.AssemblyLinearVelocity
    local player_isMoving = player_Velocity.Magnitude > 0
    local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1)
    local ball_predicted_Distance = (ball_Distance - ping / 15.3) - (ball_Speed / 3.5)

    if not closestEntityToMouse then return end -- Ensure there is a target

    local targetPosition = closestEntityToMouse.HumanoidRootPart.Position
    local target_Distance = Player:DistanceFromCharacter(targetPosition)
    local closest_target_Distance = Player:DistanceFromCharacter(closestEntityToMouse.HumanoidRootPart.Position)
    local target_distance_Limited = math.min(target_Distance / 10000, 0.1)
    local target_Direction = (player_Position - closestEntityToMouse.HumanoidRootPart.Position).Unit
    local target_Velocity = closestEntityToMouse.HumanoidRootPart.AssemblyLinearVelocity
    local target_isMoving = target_Velocity.Magnitude > 0
    local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0) or 0

    local speedFactor = 3 - (ping / 100)
    local speedFactorPingBased = 6.1 - (ping / 100)
    aura_table.parry_Range = math.max(math.max(ping, 3.5) + ball_Speed / speedFactor, speedFactorPingBased)

    local velocity_angle = math.abs(math.acos(ball_Direction:Dot(ball_Velocity.Unit)))

    if ball_Dot < -0.2 then
        aura_table.ball_Warping = tick()
    end

    if (tick() - aura_table.ball_Warping) >= 0.15 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 10 then
        aura_table.is_ball_Warping = false
    else
        if aura_table.last_target then
            if (ball_Position - aura_table.last_target.HumanoidRootPart.Position).Magnitude > 35.5 or target_Distance <= 12 then
                aura_table.is_ball_Warping = false
            end
        end
        aura_table.is_ball_Warping = true
    end

    local Ping = ball_Velocity * (ping / 1000)

    -- Pastikan VicoTable didefinisikan
    if VicoTable then
        if VicoTable.PingBased then
            local Distance
            if type(aura_table.DistanceToParry) == "number" then
                Distance = aura_table.DistanceToParry - (Ping + aura_table.PingBasedOffset)
                if Distance < 0 then Distance = 0 end -- Prevent negative values
            else
                warn("aura_table.DistanceToParry is not a number!")
                Distance = 0 -- Fallback or alternative handling
            end
        end

        if VicoTable.BallSpeedCheck and ball_Speed == 0 then return end -- Check ball speed

        if ball_Distance <= aura_table.parry_Range and not aura_table.is_ball_Warping and ball_Speed > 0 and ball_Dot > 0.1 then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        end
    else
        warn("VicoTable is nil!") -- Peringatan jika VicoTable tidak didefinisikan
    end
end)
